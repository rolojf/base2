* El contenido
En especial se debe poner en el front matter:
- el menú ya sea main ó secundario

* Este repositorio es para desarrollo y prueba del theme
Sin embargo el tema en sí, es un subtree apararte 
* Redactar en bilingue
En el menu aparece la opción de traducido si la hay.
En general se establece

#+begin_src org
#+HUGO_BASE_DIR: ~/Private/elemento/websites/base2/
#+end_src

Y se documenta en sub encabezados los dos archivos poniendo para el de español
#+begin_src org
:PROPERTIES: 
:EXPORT_FILE_NAME: voice-recording
:EXPORT_HUGO_SECTION: /post/
:END:
#+end_src

Asegurando que tiene el mismo nombre
#+begin_src org
:PROPERTIES: 
:EXPORT_FILE_NAME: voice-recording
:EXPORT_HUGO_SECTION: en/post/
:END:
#+end_src

En caso de querer poner nombre diferente
#+begin_src org
:PROPERTIES: 
:EXPORT_FILE_NAME: grabacion-de-voz
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :translationKey voice 
:END:
#+end_src

Igual se pone el translationKey en inglés así se identifica que son uno pa'l otro.

* El sidebar
Toma del custom filed del frontmatter o del site
una lista de widgets que desplegar en la página
Widgets revisados:
- Recent

* Los menus
Están predefinidos dos tipos de menu.
El primario (llamado main) que es para la página principal y el secundario para las otras.

** Para inlcuir una página en un menú
Las páginas que queremos incluir en el menú, lo ponemos en el frontmatter así:
#+begin_src org
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu main
:END:
#+end_src

** Predefinir páginas generales
Adicionalmente se puede poner datos extras programando en config.toml así:
#+begin_src toml
[menu]
  [[languajes.es.menu.main]]
    identifier = "post"
    title = "notas"
    name = "Notas en General"
    url = "/post/"
    weight = -110
#+end_src

* Javascript y Elm
Elm y Javascript ahora se precomplia con webpack
** Definir cual aplicación corresponde en cada página
En el frontmatter de la hoja correspondiente, donde va la aplicación de JS ó Elm, se debe poner elm = "nombreEntryJS"
Poniendo solo el nombre de la aplicación sin la extensión (el ".js")

O si es en orgmode con:
    ~#+hugo_custom_front_matter: :elm alpineConElm~
o bien diferente para cada tree, dentro de las propiedades, así:
    ~:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :key1 value1~
** Poner un div manualmente en la hoja donde corresponda *por hacer*
con un ~<div class="elm-nombreEntryJS-nombreDeLaElmApp"></div>~ para definir el área que toma el la aplicación.
** Se crea nombreEntry.js en assets
Ahí se importan las aplicación(es) de elm (véase demo.js) y o javascrit así

#+begin_src javascript
const { Elm } = require("./nombreDeLaElmApp");
#+end_src
** Se modifica el webpack.config.js
para incluir el como entry: ~nombreEntry: "./assets/nombreEntry.js",~

** Colocar las aplicaciones de Elm en assets/NombreDeLaElmApp.elm
** Para usar tailwind.el
Por revisar: se copia el módulo desde otro folder donde se hace ../doTw4Elm y se tiene que poner en el mismo folder de la aplicación.
